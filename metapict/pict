arrow.rkt:  (def head (curve-append (curve-append DAB BC) CD))
arrow.rkt:  (def head (curve-append (curve-append AB BC) CA))
arrow.rkt:  (def d (direction-of c (curve-length c)))
arrow.rkt:                     (curve-reverse c)
arrow.rkt:        (draw-arrow (curve-reverse c) 
arrow.rkt:  (def tip (point-of c (curve-length c)))
bez.rkt:      (send p curve-to x1 y1 x2 y2 x3 y3))
bez.rkt:        (send p curve-to x1 y1 x2 y2 x3 y3)))
box-and-pointer-diagram.rkt:(set-curve-pict-size 400 400)
box-and-pointer-diagram.rkt:(curve-pict-window (window xmin xmax ymin ymax))
curve.rkt: curve-length                 ; return number of bez in the curve
curve.rkt: curve-reverse                ; return the curve with time reversed
curve.rkt: curve-append                 ; concatenate two curves; the end and start points must match
curve.rkt:(define (end-point c)   (point-of c (curve-length c)))
curve.rkt:(define (curve-reverse c)
curve.rkt:(define (curve-append c . cs)
curve.rkt:  (curve-append* c cs))
curve.rkt:(define (curve-append* c cs)
curve.rkt:        [else (curve-append* (curve-append2 c (first cs))
curve.rkt:(define (curve-append2 c0 c1)
curve.rkt:    [(> t0 t1) (curve-reverse (subcurve c t1 t0))]
curve.rkt:    [(> t1 1)  (curve-append (subcurve c t0 1) (subcurve c 1 t1))]
curve.rkt:(define (curve-length c)
curve.rkt:          (for/list ([t (in-range (curve-length c1))])
curve.rkt:  (def n1 (curve-length c1))
curve.rkt:      (subcurve c1 t (curve-length c1))))
curve.rkt:  (def n (curve-length c1))
curve.rkt:  (defv (t u) (intersection-times (curve-reverse c1) c2))
dc-path-to-curve.rkt:(set-curve-pict-size 300 300)
device.rkt:(provide curve-pict-width                  
device.rkt:         curve-pict-height
device.rkt:         curve-pict-window
device.rkt:         set-curve-pict-size
device.rkt:         current-curve-transformation
device.rkt:(def curve-pict-width  (make-parameter 100))
device.rkt:(def curve-pict-height (make-parameter 100))
device.rkt:(def curve-pict-window (make-parameter ; (window -1 1 -1 1)
device.rkt:(define (set-curve-pict-size . xs)
device.rkt:  (curve-pict-width w) 
device.rkt:  (curve-pict-height h))
device.rkt:(define (current-curve-transformation)
device.rkt:  (stdtrans (curve-pict-window) (curve-pict-width) (curve-pict-height)))
device.rkt:  (let ([T (or T (current-curve-transformation))])
device.rkt:  (let ([T (or T (current-curve-transformation))])
device.rkt:  (let ([T (or T (current-curve-transformation))])
device.rkt:         (def Tinv (inverse (current-curve-transformation)))
draw-bezier.rkt:;  - & to append paths  (use curve-append)
draw-bezier.rkt:#;(curve->pict (curve #f (resolve-path-to-bezs (open-path: (pt 0 0) up .. (pt 1 1 ) .. up (pt 2 0))))
draw-bezier.rkt:    (set-curve-pict-size 20 20)
draw-bezier.rkt:    (set-curve-pict-size p)
draw-bezier.rkt:    (curve-pict-window (window -1 1 1 -1))
draw-bezier.rkt:    (set-curve-pict-size w h)
draw-bezier.rkt:    (curve-pict-window (window 0 w 0 h))
draw-bezier.rkt:    (set-curve-pict-size w h)
draw-bezier.rkt:    (curve-pict-window (window 0 w h 0))
draw-bezier.rkt:    (set-curve-pict-size w h)
draw-bezier.rkt:    (curve-pict-window (window 0 w h 0))
draw-bezier.rkt:    (define (curve-tests)
draw-bezier.rkt:    (curve-tests))
draw-bezier.rkt:  (defm (window xmin xmax ymin ymax) (curve-pict-window))
draw.rkt:     ['() (blank (curve-pict-width) (curve-pict-height))]
draw.rkt:                     [(curve: #f '())       (blank (curve-pict-width) (curve-pict-height))]
draw.rkt:                     [(? curve:?)           (curve->pict c)]
draw.rkt:                     [(? bez?)              (curve->pict (curve: #f (list c)))]
draw.rkt:                     [#f                    (blank (curve-pict-width) (curve-pict-height))]
draw.rkt:  (def w (curve-pict-width))
draw.rkt:  (def h (curve-pict-height))
draw.rkt:  (def T (stdtrans (curve-pict-window) w h))
draw.rkt:(define (curve->pict c)
draw.rkt:  (def w (curve-pict-width))
draw.rkt:  (def h (curve-pict-height))
draw.rkt:  (def T (stdtrans (curve-pict-window) w h))
draw.rkt:(define (curve->filled-pict c #:draw-border? [draw-border? #f])
draw.rkt:  (def w (curve-pict-width))
draw.rkt:  (def h (curve-pict-height))
draw.rkt:  (def T (stdtrans (curve-pict-window) w h)) ; logical -> device coords
draw.rkt:  (def w (curve-pict-width))
draw.rkt:  (def h (curve-pict-height))
draw.rkt:  (def T (stdtrans (curve-pict-window) w h)) ; logical -> device coords
draw.rkt:  (def pw (curve-pict-width))
draw.rkt:  (def ph (curve-pict-height))
draw.rkt:  (def T (stdtrans (curve-pict-window) pw ph))
graph.rkt:  (defm (window Xmin Xmax Ymin Ymax) (curve-pict-window))
graph.rkt:(define (clip-to-window c [win (curve-pict-window)])
graph.rkt:  (defm (window Xmin Xmax Ymin Ymax) (curve-pict-window))
graph.rkt:  (set-curve-pict-size 300 300)
graph.rkt:            (color "yellow" (fill (curve-append (cut-between F x0 x1) 
label.rkt:  (def T (current-curve-transformation))
markings.rkt: mark-curve-angle
markings.rkt:  (curve-append (curve r -- p -- q) (arc p q r)))
markings.rkt:; mark-curve-angle : curve curve number number number [#:draw-angle-curve bool] -> pict
markings.rkt:(define (mark-curve-angle c1 c2
markings.rkt:(set-curve-pict-size 200 200)
markings.rkt:        (mark-curve-angle c1 c2 #:arcs 3 #:radius (px 20) #:spacing (px 5))))
node.rkt:                (def t (/ (curve-length c) 2)) ; time of mid point
path.rkt:    [(open τ)       (display-info-for-curve-that-begins-with-open k k+)]
path.rkt:    [(tenscurl τ a) (display-info-for-curve-that-begins-with-curl-or-given k k+)]
path.rkt:    [(given τ a)    (display-info-for-curve-that-begins-with-curl-or-given k k+)]
path.rkt:(define (display-info-for-curve-that-begins-with-open k k+) ; 281
path.rkt:(define (display-info-for-curve-that-begins-with-curl-or-given k k+) ; 282
pict.rkt:  (def w (curve-pict-width))
pict.rkt:  (def h (curve-pict-height))
pict.rkt:  (def T (current-curve-transformation)) ;  logical -> device
plot.rkt:  (defm (window xmin xmax ymin ymax) (curve-pict-window))
shapes.rkt:(def halfcircle    (curve-append quartercircle ((rotatedd 90) quartercircle)))
shapes.rkt:           [(> from to)   (curve-append (arc r from 2pi) (arc r 0 to))]
shapes.rkt:  (def a1 (point-of a (curve-length a)))
shapes.rkt:  (curve-append (curve (pt 0 0) -- a0)
snake.rkt:                   (curve-append c (shifted (* i len) 0 w))))
snake.rkt:                      [else (curve-append wavy-part (curve end -- (pt l 0)))]))
snake.rkt:(set-curve-pict-size 200 200)
tree.rkt:  (set-curve-pict-size 400 400)
tree.rkt:(set-curve-pict-size 800 400)
tree.rkt:    (set-curve-pict-size 300 300)
window.rkt: with-window         ; (with-window win body ...) evaluate bodies with win as curve-pict-window
window.rkt: with-scaled-window  ; (with-scaled-window k body ...) eval bodies with curve-pict-window scaled k
window.rkt:    [(list ymin #f) (def w (curve-pict-width))
window.rkt:                    (def h (curve-pict-height))
window.rkt:         (parameterize ([curve-pict-window w]) e ...))]))
window.rkt:  (syntax-parse stx [(_ k e ...) #'(with-window (scale-window k (curve-pict-window)) e ...)]))
