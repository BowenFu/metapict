#lang racket
(require pict "../metapict.rkt")

(define (save-as-png filename pict)
  (send (pict->bitmap pict)
        save-file filename 'png))

(let ()
  (def fig
    (let ()
      (def w 400)
      (def h 400)
      (curve-pict-width w)
      (curve-pict-height h)
      (defv (xmin xmax) (values -5 5))
      (defv (ymin ymax) (values -5 5))
      (define (draw-vector color from to)
        (pencolor color (penscale 4 (draw-arrow (curve from -- to)))))
      (define (draw-line from to)
        (penscale 2 (draw (curve from -- to))))
      (with-window (window -5.1 5.1 -5.1 5.1)
        (ahlength (px 8))
        (def A1 (pt -2 1)) (def B1 (pt -2 0)) 
        (def A2 (pt  3 4)) (def B2 (pt  3 0))    
        (draw (dotted (draw* (for*/list ([i (in-range xmin (+ xmax 1))]) (curve (pt xmin i) -- (pt xmax i)))))
              (dotted (draw* (for*/list ([i (in-range ymin (+ ymax 1))]) (curve (pt i ymin) -- (pt i ymax)))))
              (penscale 2 (draw-arrow (curve (pt xmin 0) -- (pt xmax 0))))
              (penscale 2 (draw-arrow (curve (pt 0 ymin) -- (pt 0 ymax))))
              (draw-vector "dark green" (pt 2 -2) (pt 4 -2))
              (draw-vector "darkblue" A1 A2)
              (draw-vector "darkblue" B1 B2)
              (draw-line A1 B1)
              (draw-line A2 B2)))))
  (save-as-png "/Users/soegaard/Downloads/fig.png" fig)
  fig)
(let ()
  (def fig
    (let ()
      (define (proj a b) (vec* (/ (dot a b) (sqr (norm b))) b))
      (define (hat v) (defm (vec a b) v) (vec (- b) a))
      (def w 400)
      (def h 400)
      (curve-pict-width w)
      (curve-pict-height h)
      (defv (xmin xmax) (values -5 5))
      (defv (ymin ymax) (values -5 5))
      (define (draw-vector color from to)
        (pencolor color (penscale 4 (draw-arrow (curve from -- to)))))
      (define (draw-line from to)
        (penscale 2 (draw (curve from -- to))))
      (defv (a b c) (values -2 3 0))
      (def n (vec* .5 (vec a b)))
      (define (y x) (/ (- (- c) (* a x)) b))
      (define (m x) (pt x (y x)))
      (def P0 (m -4))
      (def P  (pt -2 4))
      (def Q  (pt+ P0 (proj (pt- P P0) (hat n))))
      (with-window (window (- xmin 0.1) (+ xmax 0.1)
                           (- ymin 0.1) (+ ymax 0.1))
        (ahlength (px 8))
        (draw (dot-label-bot "Q" Q)
              (dot-label-top "P(x1,y1)" P)
              (dot-label-bot "P0" P0)
              (draw-line  (m -5) (m 5))                           ; m
              (pencolor "darkblue" (draw-arrow (curve P0 -- P)))  ; P0 -> P              
              (penscale 2 (pencolor "darkgreen" (draw-line  Q P)))    ; Q  -> P
              (draw-arrow (curve Q -- P))
              (draw-arrow (curve (pt+ Q (vec* -.1 (hat n))) --  (pt+ (pt+ Q (vec* -.1 (hat n))) n)))
              (draw-arrow (curve (pt+ (m 3) (vec* -.1 (hat n))) --  (pt+ (pt+ (m 3) (vec* -.1 (hat n))) n)))
              (label-rt "n" (pt+ (pt+ (m 3) (vec* -.1 (hat n))) (vec* .5 n)))
              ))))
  (save-as-png "/Users/soegaard/Downloads/fig.png" fig)
    fig)